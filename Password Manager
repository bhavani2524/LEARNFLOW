import os
import sqlite3
import base64
import secrets
import string
import getpass
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.fernet import Fernet

# Derive encryption key from master password using PBKDF2HMAC
def derive_key(master_password, salt):
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100_000,
        backend=default_backend()
    )
    key = base64.urlsafe_b64encode(kdf.derive(master_password.encode()))
    return key

# Encrypt the password using the derived key
def encrypt_password(password, key):
    f = Fernet(key)
    encrypted_password = f.encrypt(password.encode())
    return encrypted_password

# Decrypt the password using the derived key
def decrypt_password(encrypted_password, key):
    f = Fernet(key)
    decrypted_password = f.decrypt(encrypted_password).decode()
    return decrypted_password

# Generate a random strong password
def generate_password(length=12, include_symbols=True, include_numbers=True):
    alphabet = string.ascii_letters
    if include_numbers:
        alphabet += string.digits
    if include_symbols:
        alphabet += string.punctuation
    password = ''.join(secrets.choice(alphabet) for _ in range(length))
    return password

# Initialize the database for storing encrypted passwords
def create_db():
    conn = sqlite3.connect('password_manager.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS passwords
                 (id INTEGER PRIMARY KEY, 
                  site_name TEXT, 
                  encrypted_password BLOB, 
                  category TEXT, 
                  salt BLOB)''')
    conn.commit()
    conn.close()

# Add a new encrypted password entry to the database
def add_password(site_name, encrypted_password, category, salt):
    conn = sqlite3.connect('password_manager.db')
    c = conn.cursor()
    c.execute("INSERT INTO passwords (site_name, encrypted_password, category, salt) VALUES (?, ?, ?, ?)", 
              (site_name, encrypted_password, category, salt))
    conn.commit()
    conn.close()

# Retrieve an encrypted password from the database by site name
def get_password(site_name):
    conn = sqlite3.connect('password_manager.db')
    c = conn.cursor()
    c.execute("SELECT encrypted_password, category, salt FROM passwords WHERE site_name=?", (site_name,))
    result = c.fetchone()
    conn.close()
    return result

# Main function to run the password manager
def main():
    create_db()
    master_password = getpass.getpass("Enter your master password: ")

    while True:
        print("\nOptions:")
        print("1. Add a new password")
        print("2. Retrieve a password")
        print("3. Generate a random password")
        print("4. Exit")
        choice = input("Select an option: ")

        if choice == '1':
            site_name = input("Enter the site name: ")
            category = input("Enter category (e.g., Work, Social, Banking): ")
            password = input("Enter the password: ")
            salt = os.urandom(16)  # Unique salt for each entry
            key = derive_key(master_password, salt)
            encrypted_password = encrypt_password(password, key)
            add_password(site_name, encrypted_password, category, salt)
            print(f"Password for {site_name} added successfully.")

        elif choice == '2':
            site_name = input("Enter the site name: ")
            result = get_password(site_name)
            if result:
                encrypted_password, category, salt = result
                key = derive_key(master_password, salt)
                try:
                    decrypted_password = decrypt_password(encrypted_password, key)
                    print(f"Site: {site_name}")
                    print(f"Category: {category}")
                    print(f"Password: {decrypted_password}")
                except:
                    print("Invalid master password or corrupted data.")
            else:
                print("No password found for the site.")

        elif choice == '3':
            length = int(input("Enter the desired password length: "))
            include_symbols = input("Include symbols? (y/n): ").lower() == 'y'
            include_numbers = input("Include numbers? (y/n): ").lower() == 'y'
            new_password = generate_password(length, include_symbols, include_numbers)
            print(f"Generated password: {new_password}")

        elif choice == '4':
            break

if __name__ == "__main__":
    main()
